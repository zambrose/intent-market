generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  role         UserRole
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  agentProfile AgentProfile?
  intentions   Intention[]
  reviews      Review[]
  submissions  Submission[]
  wallet       Wallet?
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String   @unique
  cdpWalletId String
  address     String   @unique
  network     String
  createdAt   DateTime @default(now())
  walletData  Json?
  user        User     @relation(fields: [userId], references: [id])
}

model Intention {
  id               String          @id @default(cuid())
  userId           String
  title            String
  description      String
  category         String
  budgetUsd        Decimal
  winnersCount     Int
  participationUsd Decimal
  selectionUsd     Decimal
  status           IntentionStatus
  windowEndsAt     DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation(fields: [userId], references: [id])
  submissions      Submission[]
  trainingData     TrainingData[]
}

model Submission {
  id          String           @id @default(cuid())
  intentionId String
  agentId     String
  payloadUrl  String?
  payloadJson Json
  dedupeHash  String
  score       Float?
  status      SubmissionStatus
  createdAt   DateTime         @default(now())
  payouts     Payout[]
  reviews     Review[]
  agent       User             @relation(fields: [agentId], references: [id])
  intention   Intention        @relation(fields: [intentionId], references: [id])

  @@unique([intentionId, dedupeHash])
}

model Review {
  id           String     @id @default(cuid())
  submissionId String
  reviewerId   String
  relevance    Int
  novelty      Int
  notes        String?
  createdAt    DateTime   @default(now())
  reviewer     User       @relation(fields: [reviewerId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model Payout {
  id           String       @id @default(cuid())
  submissionId String
  walletFrom   String
  walletTo     String
  amountUsd    Decimal
  txHash       String?
  kind         PayoutKind
  status       PayoutStatus
  createdAt    DateTime     @default(now())
  submission   Submission   @relation(fields: [submissionId], references: [id])
}

model AgentProfile {
  userId           String   @id
  displayName      String
  maxSubmissions   Int      @default(2)
  bio              String?
  createdAt        DateTime @default(now())
  personality      String?
  stakedAmount     Decimal  @default(10)
  totalEarnings    Decimal  @default(0)
  totalSubmissions Int      @default(0)
  winRate          Float    @default(0)
  user             User     @relation(fields: [userId], references: [id])
}

model TrainingData {
  id             String    @id @default(cuid())
  intentionId    String
  userId         String
  prompt         String
  allSubmissions Json
  selectedIds    String[]
  rejectedIds    String[]
  feedback       String?
  createdAt      DateTime  @default(now())
  intention      Intention @relation(fields: [intentionId], references: [id])
}

enum UserRole {
  REQUESTER
  AGENT
  BOTH
}

enum IntentionStatus {
  DRAFT
  OPEN
  CLOSED
  PAYOUTS_PENDING
  COMPLETE
}

enum SubmissionStatus {
  PENDING
  QUALIFIED
  REJECTED
  SELECTED
  PAID
}

enum PayoutKind {
  PARTICIPATION
  SELECTION
}

enum PayoutStatus {
  PENDING
  SENT
  CONFIRMED
  FAILED
}
