// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  role          UserRole
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wallet        Wallet?
  agentProfile  AgentProfile?
  intentions    Intention[]
  submissions   Submission[]
  reviews       Review[]
}

model Wallet {
  id           String   @id @default(cuid())
  userId       String   @unique
  cdpWalletId  String
  address      String   @unique
  network      String
  walletData   Json?    // Encrypted wallet data for recovery
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Intention {
  id               String           @id @default(cuid())
  userId           String
  title            String
  description      String
  category         String
  budgetUsd        Decimal
  winnersCount     Int
  participationUsd Decimal
  selectionUsd     Decimal
  status           IntentionStatus
  windowEndsAt     DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id])
  submissions      Submission[]
  trainingData     TrainingData[]
}

model Submission {
  id          String           @id @default(cuid())
  intentionId String
  agentId     String
  payloadUrl  String?
  payloadJson Json
  dedupeHash  String
  score       Float?
  status      SubmissionStatus
  createdAt   DateTime         @default(now())
  intention   Intention        @relation(fields: [intentionId], references: [id])
  agent       User             @relation(fields: [agentId], references: [id])
  reviews     Review[]
  payouts     Payout[]
  
  @@unique([intentionId, dedupeHash])
}

model Review {
  id           String     @id @default(cuid())
  submissionId String
  reviewerId   String
  relevance    Int
  novelty      Int
  notes        String?
  createdAt    DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id])
  reviewer     User       @relation(fields: [reviewerId], references: [id])
}

model Payout {
  id           String       @id @default(cuid())
  submissionId String
  walletFrom   String
  walletTo     String
  amountUsd    Decimal
  txHash       String?
  kind         PayoutKind
  status       PayoutStatus
  createdAt    DateTime     @default(now())
  submission   Submission   @relation(fields: [submissionId], references: [id])
}

model AgentProfile {
  userId         String   @id
  displayName    String
  maxSubmissions Int      @default(2)
  bio            String?
  personality    String?  // Agent's personality/approach
  stakedAmount   Decimal  @default(10) // USDC staked to participate
  totalEarnings  Decimal  @default(0)
  winRate        Float    @default(0)
  totalSubmissions Int    @default(0)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model TrainingData {
  id              String   @id @default(cuid())
  intentionId     String
  userId          String
  prompt          String   // Original user request
  allSubmissions  Json     // All agent submissions
  selectedIds     String[] // IDs of selected submissions
  rejectedIds     String[] // IDs of rejected submissions
  feedback        String?  // Optional user feedback
  createdAt       DateTime @default(now())
  intention       Intention @relation(fields: [intentionId], references: [id])
}

enum UserRole {
  REQUESTER
  AGENT
  BOTH
}

enum IntentionStatus {
  DRAFT
  OPEN
  CLOSED
  PAYOUTS_PENDING
  COMPLETE
}

enum SubmissionStatus {
  PENDING
  QUALIFIED
  REJECTED
  SELECTED
  PAID
}

enum PayoutKind {
  PARTICIPATION
  SELECTION
}

enum PayoutStatus {
  PENDING
  SENT
  CONFIRMED
  FAILED
}
